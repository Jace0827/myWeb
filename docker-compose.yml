# ./docker-compose.yml
networks:
  frontend_net:
  backend_net:


services:
  # (1) Express 서버
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    # 개발 중에는 파일 변경 감지하여 자동 동기화 및 재시작
    # develop:
    #   watch:
    #     - action: sync+restart
    #       path: ./server
    #       target: /app
    #       ignore:
    #         - node_modules/
    #     - action: rebuild
    #       path: package.json 
    container_name: express_server
    # 외부에 포트 노출 대신, 내부 네트워크에만 포트 개방
    expose:
      - "3000"
    networks:
      - backend_net
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_PORT}
      - PEPPER=${PEPPER}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 3
    restart: always

  # (2) 리액트 클라이언트 + Nginx 서빙
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        # (중요) build 시점에 환경변수를 전달해야 함
        REACT_APP_API_URL: "${REACT_APP_API_URL}"
    container_name: react_client
    # 외부에 포트 노출 대신, 내부 네트워크에만 포트 개방
    ports:
      - "80:80" # 호스트의 80번 포트 -> 컨테이너의 80번 포트
    depends_on:
      - server
    networks:
      - frontend_net
      - backend_net
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f https://localhost/health || exit 1"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 3
    restart: always
